// Code generated by counterfeiter. DO NOT EDIT.
package volmanfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/voldriver"
	"code.cloudfoundry.org/volman/voldiscoverers"
)

type FakeDockerDriverFactory struct {
	DockerDriverStub        func(logger lager.Logger, driverId string, driverPath, driverFileName string) (voldriver.Driver, error)
	dockerDriverMutex       sync.RWMutex
	dockerDriverArgsForCall []struct {
		logger         lager.Logger
		driverId       string
		driverPath     string
		driverFileName string
	}
	dockerDriverReturns struct {
		result1 voldriver.Driver
		result2 error
	}
	dockerDriverReturnsOnCall map[int]struct {
		result1 voldriver.Driver
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDockerDriverFactory) DockerDriver(logger lager.Logger, driverId string, driverPath string, driverFileName string) (voldriver.Driver, error) {
	fake.dockerDriverMutex.Lock()
	ret, specificReturn := fake.dockerDriverReturnsOnCall[len(fake.dockerDriverArgsForCall)]
	fake.dockerDriverArgsForCall = append(fake.dockerDriverArgsForCall, struct {
		logger         lager.Logger
		driverId       string
		driverPath     string
		driverFileName string
	}{logger, driverId, driverPath, driverFileName})
	fake.recordInvocation("DockerDriver", []interface{}{logger, driverId, driverPath, driverFileName})
	fake.dockerDriverMutex.Unlock()
	if fake.DockerDriverStub != nil {
		return fake.DockerDriverStub(logger, driverId, driverPath, driverFileName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.dockerDriverReturns.result1, fake.dockerDriverReturns.result2
}

func (fake *FakeDockerDriverFactory) DockerDriverCallCount() int {
	fake.dockerDriverMutex.RLock()
	defer fake.dockerDriverMutex.RUnlock()
	return len(fake.dockerDriverArgsForCall)
}

func (fake *FakeDockerDriverFactory) DockerDriverArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.dockerDriverMutex.RLock()
	defer fake.dockerDriverMutex.RUnlock()
	return fake.dockerDriverArgsForCall[i].logger, fake.dockerDriverArgsForCall[i].driverId, fake.dockerDriverArgsForCall[i].driverPath, fake.dockerDriverArgsForCall[i].driverFileName
}

func (fake *FakeDockerDriverFactory) DockerDriverReturns(result1 voldriver.Driver, result2 error) {
	fake.DockerDriverStub = nil
	fake.dockerDriverReturns = struct {
		result1 voldriver.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDockerDriverFactory) DockerDriverReturnsOnCall(i int, result1 voldriver.Driver, result2 error) {
	fake.DockerDriverStub = nil
	if fake.dockerDriverReturnsOnCall == nil {
		fake.dockerDriverReturnsOnCall = make(map[int]struct {
			result1 voldriver.Driver
			result2 error
		})
	}
	fake.dockerDriverReturnsOnCall[i] = struct {
		result1 voldriver.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDockerDriverFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dockerDriverMutex.RLock()
	defer fake.dockerDriverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDockerDriverFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ voldiscoverers.DockerDriverFactory = new(FakeDockerDriverFactory)
