// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/cloudfoundry-incubator/voldriver"
	"github.com/cloudfoundry-incubator/volman/vollocal"
	"github.com/tedsuo/ifrit"
)

type FakeDriverSyncer struct {
	RunnerStub        func() ifrit.Runner
	runnerMutex       sync.RWMutex
	runnerArgsForCall []struct{}
	runnerReturns     struct {
		result1 ifrit.Runner
	}
	DiscoverStub        func(logger lager.Logger) (map[string]voldriver.Driver, error)
	discoverMutex       sync.RWMutex
	discoverArgsForCall []struct {
		logger lager.Logger
	}
	discoverReturns struct {
		result1 map[string]voldriver.Driver
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriverSyncer) Runner() ifrit.Runner {
	fake.runnerMutex.Lock()
	fake.runnerArgsForCall = append(fake.runnerArgsForCall, struct{}{})
	fake.recordInvocation("Runner", []interface{}{})
	fake.runnerMutex.Unlock()
	if fake.RunnerStub != nil {
		return fake.RunnerStub()
	} else {
		return fake.runnerReturns.result1
	}
}

func (fake *FakeDriverSyncer) RunnerCallCount() int {
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	return len(fake.runnerArgsForCall)
}

func (fake *FakeDriverSyncer) RunnerReturns(result1 ifrit.Runner) {
	fake.RunnerStub = nil
	fake.runnerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeDriverSyncer) Discover(logger lager.Logger) (map[string]voldriver.Driver, error) {
	fake.discoverMutex.Lock()
	fake.discoverArgsForCall = append(fake.discoverArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Discover", []interface{}{logger})
	fake.discoverMutex.Unlock()
	if fake.DiscoverStub != nil {
		return fake.DiscoverStub(logger)
	} else {
		return fake.discoverReturns.result1, fake.discoverReturns.result2
	}
}

func (fake *FakeDriverSyncer) DiscoverCallCount() int {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	return len(fake.discoverArgsForCall)
}

func (fake *FakeDriverSyncer) DiscoverArgsForCall(i int) lager.Logger {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	return fake.discoverArgsForCall[i].logger
}

func (fake *FakeDriverSyncer) DiscoverReturns(result1 map[string]voldriver.Driver, result2 error) {
	fake.DiscoverStub = nil
	fake.discoverReturns = struct {
		result1 map[string]voldriver.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDriverSyncer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDriverSyncer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vollocal.DriverSyncer = new(FakeDriverSyncer)
