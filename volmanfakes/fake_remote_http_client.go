// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/volman/remote"
)

type FakeRemoteHttpClientInterface struct {
	GetStub        func(fromPath string) remote.RequestReturnInterface
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		fromPath string
	}
	getReturns struct {
		result1 remote.RequestReturnInterface
	}
	URLStub        func() string
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct{}
	uRLReturns     struct {
		result1 string
	}
}

func (fake *FakeRemoteHttpClientInterface) Get(fromPath string) remote.RequestReturnInterface {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		fromPath string
	}{fromPath})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(fromPath)
	} else {
		return fake.getReturns.result1
	}
}

func (fake *FakeRemoteHttpClientInterface) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeRemoteHttpClientInterface) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].fromPath
}

func (fake *FakeRemoteHttpClientInterface) GetReturns(result1 remote.RequestReturnInterface) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 remote.RequestReturnInterface
	}{result1}
}

func (fake *FakeRemoteHttpClientInterface) URL() string {
	fake.uRLMutex.Lock()
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct{}{})
	fake.uRLMutex.Unlock()
	if fake.URLStub != nil {
		return fake.URLStub()
	} else {
		return fake.uRLReturns.result1
	}
}

func (fake *FakeRemoteHttpClientInterface) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *FakeRemoteHttpClientInterface) URLReturns(result1 string) {
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 string
	}{result1}
}

var _ remote.RemoteHttpClientInterface = new(FakeRemoteHttpClientInterface)
