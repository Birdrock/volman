// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/volman/voldriver"
	"github.com/pivotal-golang/lager"
)

type FakeDriver struct {
	InfoStub        func(logger lager.Logger) (voldriver.InfoResponse, error)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		logger lager.Logger
	}
	infoReturns struct {
		result1 voldriver.InfoResponse
		result2 error
	}
	CreateStub        func(logger lager.Logger, createRequest voldriver.CreateRequest) voldriver.ErrorResponse
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		logger        lager.Logger
		createRequest voldriver.CreateRequest
	}
	createReturns struct {
		result1 voldriver.ErrorResponse
	}
	MountStub        func(logger lager.Logger, mountRequest voldriver.MountRequest) voldriver.MountResponse
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger       lager.Logger
		mountRequest voldriver.MountRequest
	}
	mountReturns struct {
		result1 voldriver.MountResponse
	}
	UnmountStub        func(logger lager.Logger, unmountRequest voldriver.UnmountRequest) voldriver.ErrorResponse
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		logger         lager.Logger
		unmountRequest voldriver.UnmountRequest
	}
	unmountReturns struct {
		result1 voldriver.ErrorResponse
	}
	RemoveStub        func(logger lager.Logger, removeRequest voldriver.RemoveRequest) voldriver.ErrorResponse
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		logger        lager.Logger
		removeRequest voldriver.RemoveRequest
	}
	removeReturns struct {
		result1 voldriver.ErrorResponse
	}
	GetStub        func(logger lager.Logger, getRequest voldriver.GetRequest) voldriver.GetResponse
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		logger     lager.Logger
		getRequest voldriver.GetRequest
	}
	getReturns struct {
		result1 voldriver.GetResponse
	}
}

func (fake *FakeDriver) Info(logger lager.Logger) (voldriver.InfoResponse, error) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub(logger)
	} else {
		return fake.infoReturns.result1, fake.infoReturns.result2
	}
}

func (fake *FakeDriver) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeDriver) InfoArgsForCall(i int) lager.Logger {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].logger
}

func (fake *FakeDriver) InfoReturns(result1 voldriver.InfoResponse, result2 error) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 voldriver.InfoResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) Create(logger lager.Logger, createRequest voldriver.CreateRequest) voldriver.ErrorResponse {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		logger        lager.Logger
		createRequest voldriver.CreateRequest
	}{logger, createRequest})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(logger, createRequest)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeDriver) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDriver) CreateArgsForCall(i int) (lager.Logger, voldriver.CreateRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].logger, fake.createArgsForCall[i].createRequest
}

func (fake *FakeDriver) CreateReturns(result1 voldriver.ErrorResponse) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Mount(logger lager.Logger, mountRequest voldriver.MountRequest) voldriver.MountResponse {
	fake.mountMutex.Lock()
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger       lager.Logger
		mountRequest voldriver.MountRequest
	}{logger, mountRequest})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, mountRequest)
	} else {
		return fake.mountReturns.result1
	}
}

func (fake *FakeDriver) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeDriver) MountArgsForCall(i int) (lager.Logger, voldriver.MountRequest) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].mountRequest
}

func (fake *FakeDriver) MountReturns(result1 voldriver.MountResponse) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 voldriver.MountResponse
	}{result1}
}

func (fake *FakeDriver) Unmount(logger lager.Logger, unmountRequest voldriver.UnmountRequest) voldriver.ErrorResponse {
	fake.unmountMutex.Lock()
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		logger         lager.Logger
		unmountRequest voldriver.UnmountRequest
	}{logger, unmountRequest})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(logger, unmountRequest)
	} else {
		return fake.unmountReturns.result1
	}
}

func (fake *FakeDriver) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeDriver) UnmountArgsForCall(i int) (lager.Logger, voldriver.UnmountRequest) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].logger, fake.unmountArgsForCall[i].unmountRequest
}

func (fake *FakeDriver) UnmountReturns(result1 voldriver.ErrorResponse) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Remove(logger lager.Logger, removeRequest voldriver.RemoveRequest) voldriver.ErrorResponse {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		logger        lager.Logger
		removeRequest voldriver.RemoveRequest
	}{logger, removeRequest})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(logger, removeRequest)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakeDriver) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeDriver) RemoveArgsForCall(i int) (lager.Logger, voldriver.RemoveRequest) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].logger, fake.removeArgsForCall[i].removeRequest
}

func (fake *FakeDriver) RemoveReturns(result1 voldriver.ErrorResponse) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Get(logger lager.Logger, getRequest voldriver.GetRequest) voldriver.GetResponse {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		logger     lager.Logger
		getRequest voldriver.GetRequest
	}{logger, getRequest})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(logger, getRequest)
	} else {
		return fake.getReturns.result1
	}
}

func (fake *FakeDriver) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeDriver) GetArgsForCall(i int) (lager.Logger, voldriver.GetRequest) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].logger, fake.getArgsForCall[i].getRequest
}

func (fake *FakeDriver) GetReturns(result1 voldriver.GetResponse) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 voldriver.GetResponse
	}{result1}
}

var _ voldriver.Driver = new(FakeDriver)
