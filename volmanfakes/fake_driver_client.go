// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/volman"
	"github.com/cloudfoundry-incubator/volman/delegate"
	"github.com/pivotal-golang/lager"
)

type FakeDriverClient struct {
	ListDriversStub        func(logger lager.Logger) ([]volman.Driver, error)
	listDriversMutex       sync.RWMutex
	listDriversArgsForCall []struct {
		logger lager.Logger
	}
	listDriversReturns struct {
		result1 []volman.Driver
		result2 error
	}
	MountStub        func(logger lager.Logger, driver volman.Driver, volumeId string, config string) (string, error)
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger   lager.Logger
		driver   volman.Driver
		volumeId string
		config   string
	}
	mountReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeDriverClient) ListDrivers(logger lager.Logger) ([]volman.Driver, error) {
	fake.listDriversMutex.Lock()
	fake.listDriversArgsForCall = append(fake.listDriversArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.listDriversMutex.Unlock()
	if fake.ListDriversStub != nil {
		return fake.ListDriversStub(logger)
	} else {
		return fake.listDriversReturns.result1, fake.listDriversReturns.result2
	}
}

func (fake *FakeDriverClient) ListDriversCallCount() int {
	fake.listDriversMutex.RLock()
	defer fake.listDriversMutex.RUnlock()
	return len(fake.listDriversArgsForCall)
}

func (fake *FakeDriverClient) ListDriversArgsForCall(i int) lager.Logger {
	fake.listDriversMutex.RLock()
	defer fake.listDriversMutex.RUnlock()
	return fake.listDriversArgsForCall[i].logger
}

func (fake *FakeDriverClient) ListDriversReturns(result1 []volman.Driver, result2 error) {
	fake.ListDriversStub = nil
	fake.listDriversReturns = struct {
		result1 []volman.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDriverClient) Mount(logger lager.Logger, driver volman.Driver, volumeId string, config string) (string, error) {
	fake.mountMutex.Lock()
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger   lager.Logger
		driver   volman.Driver
		volumeId string
		config   string
	}{logger, driver, volumeId, config})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, driver, volumeId, config)
	} else {
		return fake.mountReturns.result1, fake.mountReturns.result2
	}
}

func (fake *FakeDriverClient) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeDriverClient) MountArgsForCall(i int) (lager.Logger, volman.Driver, string, string) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].driver, fake.mountArgsForCall[i].volumeId, fake.mountArgsForCall[i].config
}

func (fake *FakeDriverClient) MountReturns(result1 string, result2 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ delegate.DriverClient = new(FakeDriverClient)
