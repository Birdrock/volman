// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/volman"
	"github.com/pivotal-golang/lager"
)

type FakeDriverPlugin struct {
	InfoStub        func(logger lager.Logger) (volman.DriverInfo, error)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		logger lager.Logger
	}
	infoReturns struct {
		result1 volman.DriverInfo
		result2 error
	}
	MountStub        func(logger lager.Logger, volumeId string, config string) (string, error)
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger   lager.Logger
		volumeId string
		config   string
	}
	mountReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeDriverPlugin) Info(logger lager.Logger) (volman.DriverInfo, error) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub(logger)
	} else {
		return fake.infoReturns.result1, fake.infoReturns.result2
	}
}

func (fake *FakeDriverPlugin) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeDriverPlugin) InfoArgsForCall(i int) lager.Logger {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].logger
}

func (fake *FakeDriverPlugin) InfoReturns(result1 volman.DriverInfo, result2 error) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 volman.DriverInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeDriverPlugin) Mount(logger lager.Logger, volumeId string, config string) (string, error) {
	fake.mountMutex.Lock()
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger   lager.Logger
		volumeId string
		config   string
	}{logger, volumeId, config})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, volumeId, config)
	} else {
		return fake.mountReturns.result1, fake.mountReturns.result2
	}
}

func (fake *FakeDriverPlugin) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeDriverPlugin) MountArgsForCall(i int) (lager.Logger, string, string) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].volumeId, fake.mountArgsForCall[i].config
}

func (fake *FakeDriverPlugin) MountReturns(result1 string, result2 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ volman.DriverPlugin = new(FakeDriverPlugin)
