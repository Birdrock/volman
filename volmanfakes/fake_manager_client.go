// Code generated by counterfeiter. DO NOT EDIT.
package volmanfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/volman"
)

type FakeManager struct {
	ListDriversStub        func(logger lager.Logger) (volman.ListDriversResponse, error)
	listDriversMutex       sync.RWMutex
	listDriversArgsForCall []struct {
		logger lager.Logger
	}
	listDriversReturns struct {
		result1 volman.ListDriversResponse
		result2 error
	}
	listDriversReturnsOnCall map[int]struct {
		result1 volman.ListDriversResponse
		result2 error
	}
	MountStub        func(logger lager.Logger, driverId string, volumeId string, containerId string, config map[string]interface{}) (volman.MountResponse, error)
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger      lager.Logger
		driverId    string
		volumeId    string
		containerId string
		config      map[string]interface{}
	}
	mountReturns struct {
		result1 volman.MountResponse
		result2 error
	}
	mountReturnsOnCall map[int]struct {
		result1 volman.MountResponse
		result2 error
	}
	UnmountStub        func(logger lager.Logger, driverId string, volumeId string, containerId string) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		logger      lager.Logger
		driverId    string
		volumeId    string
		containerId string
	}
	unmountReturns struct {
		result1 error
	}
	unmountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) ListDrivers(logger lager.Logger) (volman.ListDriversResponse, error) {
	fake.listDriversMutex.Lock()
	ret, specificReturn := fake.listDriversReturnsOnCall[len(fake.listDriversArgsForCall)]
	fake.listDriversArgsForCall = append(fake.listDriversArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("ListDrivers", []interface{}{logger})
	fake.listDriversMutex.Unlock()
	if fake.ListDriversStub != nil {
		return fake.ListDriversStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDriversReturns.result1, fake.listDriversReturns.result2
}

func (fake *FakeManager) ListDriversCallCount() int {
	fake.listDriversMutex.RLock()
	defer fake.listDriversMutex.RUnlock()
	return len(fake.listDriversArgsForCall)
}

func (fake *FakeManager) ListDriversArgsForCall(i int) lager.Logger {
	fake.listDriversMutex.RLock()
	defer fake.listDriversMutex.RUnlock()
	return fake.listDriversArgsForCall[i].logger
}

func (fake *FakeManager) ListDriversReturns(result1 volman.ListDriversResponse, result2 error) {
	fake.ListDriversStub = nil
	fake.listDriversReturns = struct {
		result1 volman.ListDriversResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListDriversReturnsOnCall(i int, result1 volman.ListDriversResponse, result2 error) {
	fake.ListDriversStub = nil
	if fake.listDriversReturnsOnCall == nil {
		fake.listDriversReturnsOnCall = make(map[int]struct {
			result1 volman.ListDriversResponse
			result2 error
		})
	}
	fake.listDriversReturnsOnCall[i] = struct {
		result1 volman.ListDriversResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Mount(logger lager.Logger, driverId string, volumeId string, containerId string, config map[string]interface{}) (volman.MountResponse, error) {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger      lager.Logger
		driverId    string
		volumeId    string
		containerId string
		config      map[string]interface{}
	}{logger, driverId, volumeId, containerId, config})
	fake.recordInvocation("Mount", []interface{}{logger, driverId, volumeId, containerId, config})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, driverId, volumeId, containerId, config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.mountReturns.result1, fake.mountReturns.result2
}

func (fake *FakeManager) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeManager) MountArgsForCall(i int) (lager.Logger, string, string, string, map[string]interface{}) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].driverId, fake.mountArgsForCall[i].volumeId, fake.mountArgsForCall[i].containerId, fake.mountArgsForCall[i].config
}

func (fake *FakeManager) MountReturns(result1 volman.MountResponse, result2 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 volman.MountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) MountReturnsOnCall(i int, result1 volman.MountResponse, result2 error) {
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 volman.MountResponse
			result2 error
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 volman.MountResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Unmount(logger lager.Logger, driverId string, volumeId string, containerId string) error {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		logger      lager.Logger
		driverId    string
		volumeId    string
		containerId string
	}{logger, driverId, volumeId, containerId})
	fake.recordInvocation("Unmount", []interface{}{logger, driverId, volumeId, containerId})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(logger, driverId, volumeId, containerId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmountReturns.result1
}

func (fake *FakeManager) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeManager) UnmountArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].logger, fake.unmountArgsForCall[i].driverId, fake.unmountArgsForCall[i].volumeId, fake.unmountArgsForCall[i].containerId
}

func (fake *FakeManager) UnmountReturns(result1 error) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) UnmountReturnsOnCall(i int, result1 error) {
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listDriversMutex.RLock()
	defer fake.listDriversMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volman.Manager = new(FakeManager)
